;;;; Jisp Programming Language
;;;; Standard Library
;;;; By Seng Jik


;;;;;;;; Basics

;; Bind Function
;; Bind a value to a identifier.
;; This function is a part of syntax.
;; Defined by Runtime.
;; value -> f -> (f value)
;($$ (λ value f	
;	(f value)))

;; Ignore Function
;; Ignore a value and return a unit.
;; value -> unit
($ignore (λ a
	()))

;; Invoke Function
;; Invoke a function and pass arguments from tuple.
;; Defined by Runtime.
;; f -> arguments tuple -> (f arguments)
($invoke (λ f a
	(invoke f a)))

;; Eval Function
;; Invoke an expression from string.
;; Defined by Runtime.
;; string -> result
;($eval (λ src (...)))

;; Failwith Function
;; Raise an exception.
;; Defined by Runtime.
;; string -> no-return
;($failwith (λ message (...)))

;; Y Combinator
;; Defined by Runtime.
;($Y (λ f 
;	($t (λ x (f (x x)))) 
;	t t))

;; Exit Function
;; Stop evaluation and return a result.
;; Defined by Runtime.
;; result -> no-return
;($exit (λ result (...)))

;;;;;;;; Booleans

;; Boolean Constants
($true 1)
($false 0)

;; True Function
;; a -> b -> a
($true-function (λ a b (a)))

;; False Function
;; a -> b -> b
($false-function (λ a b (b)))

;; Boolean-Function Function
;; Get a boolean function from a boolean constant
;; bool -> boolean-function
($boolean-function (λ a 
	(? a true-function false-function)))

;; If Operator
;; If condition is true, return a, otherwise, return b.
;; Defined by Runtime.
;; (bool) (a) (b) -> a or b
;; Can not be curried.
;($? (λ condition a b
;	((boolean-function condition) a b)))



;;;;;;;; Boolean Operators

;; Or Operator
;; bool -> bool -> bool
($| (λ a b
	(? a true (? b true false))))

;; And Operator
;; bool -> bool -> bool
($& (λ a b
	(? a (? b true false) false)))

;; Not Operator
;; bool -> bool
($! (λ a
	(? a false true)))


;;;;;;;; Function Operators

;; Forward Function Combine Operator
;; a -> b -> (λ x (b (a x))
($>> (λ f g 
	(λ x (g (f (x))))))

;; Backward Function Combine Operator
;; a -> b -> (λ x (a (b x))
($<< (λ f g 
	(λ x (f (g (x))))))


;;;;;;;; Arithmetic Operators

;; a -> b -> c -> ... -> a + b + c + ...
;; Defined by Runtime
;($+ (λ ... (...)))

;; a -> b -> c -> ... -> a - b - c - ...
;; Defined by Runtime
;($- (λ ... (...)))

;; a -> b -> c -> ... -> a * b * c * ...
;; Defined by Runtime
;($* (λ ... (...)))

;; a -> b -> c -> ... -> a / b / c / ...
;; Defined by Runtime
;($/ (λ ... (...)))

;; a -> b -> c -> ... -> a % b % c % ...
;; Defined by Runtime
;($% (λ ... (...)))


;;;;;;;; Comparison Operators

;; a -> b -> bool

;; Defined by Runtime
($= (λ a b 
	(= a b)))

;; Defined by Runtime
($< (λ a b 
	(< a b)))

($!= (λ a b
	(! (= a b))))

($<= (λ a b
	(| (< a b) (= a b))))

($> (λ a b 
	(! (<= a b))))

($>= (λ a b 
	(| (> a b) (= a b))))



;;;;;;;; Tuple

;; Is-Empty Function
;; tuple -> bool
;; Defined by Runtime
;($is-empty (λ t (...))

;; Cons Function
;; Add a value to the most left of tuple.
;; Defined by Runtime
;; value -> tuple -> tuple
($cons (λ value tuple
	(cons value tuple)))

;; Tuple Function
;; Create a tuple from given arguments.
;; Defined by Runtime
;; a -> b -> c -> ... -> tuple
;($tuple (λ ... (...)))

;; Head Function
;; Return the most left element of tuple.
;; Defined by Runtime
;; tuple<element> -> element
;($head (λ tuple (...)))

;; Tail Function
;; Return the tuple and remove the most left element.
;; Defined by Runtime
;; tuple -> tuple
;($tail (λ tuple (...)))

;; Concat Function
;; Concat tuples.
;; Defined by Runtime.
;; tuple -> ... -> tuple
;($concat (λ ... (...)))

;;;;;;;; IO

;; Print String Line Function
;; Print a line of string.
;; Defined by Runtime.
;; string -> unit
;($print-str-ln (λ str (...)))


;; Read File Function
;; Read file from filesystem.
;; filename -> number tuple
;($read-file (λ filename (...)))
