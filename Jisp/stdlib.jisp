;;;; Jisp Programming Language
;;;; Standard Library
;;;; By Seng Jik


;;;;;;;; Basics

;; Bind Function
;; Bind a value to a identifier.
;; This function is a part of syntax.
;; Defined by Runtime.
;; value -> f -> (f value)
;($$ (λ value f	
;	(f value)))

;; Ignore Function
;; Ignore a value and return a unit.
;; value -> unit
($ignore (λ a
	()))

;; Invoke Function
;; Invoke a function and pass arguments from tuple.
;; Defined by Runtime.
;; f -> arguments tuple -> (f arguments)
($invoke (λ f a
	(invoke f a)))

;; Eval Function
;; Invoke an expression from string.
;; Defined by Runtime.
;; string -> result
;($eval (λ src (...)))

;; Y Combinator
;; Defined by Runtime.
;($Y (λ f 
;	($t (λ x (f (x x)))) 
;		t t))


;;;;;;;; Booleans

;; Boolean Constants
($true 1)
($false 0)

;; True Function
;; a -> b -> a
($true-function (λ a b (a)))

;; False Function
;; a -> b -> b
($false-function (λ a b (b)))

;; Boolean-Function Function
;; Get a boolean function from a boolean constant
;; bool -> boolean-function
($boolean-function (λ a 
	(? a true-function false-function)))

;; If Operator
;; If condition is true, return a, otherwise, return b.
;; Defined by Runtime.
;; (bool) (a) (b) -> a or b
;; Can not be curried.
;($? (λ condition a b
;	((boolean-function condition) a b)))


;;;;;;;; Boolean Operators

;; Or Operator
;; bool -> bool -> bool
($| (λ a b
	(? a true (? b true false))))

;; And Operator
;; bool -> bool -> bool
($& (λ a b
	(? a (? b true false) false)))

;; Not Operator
;; bool -> bool
($! (λ a
	(? a false true)))


;;;;;;;; Function Operators

;; Forward Function Combine Operator
;; a -> b -> (λ x (b (a x))
($>> (λ f g 
	(λ x (g (f (x))))))

;; Backward Function Combine Operator
;; a -> b -> (λ x (a (b x))
($<< (λ f g 
	(λ x (f (g (x))))))


;;;;;;;; Arithmetic Operators

;; a -> b -> c -> ... -> a + b + c + ...
;; Defined by Runtime
;($+ (λ ... (...)))

;; a -> b -> c -> ... -> a - b - c - ...
;; Defined by Runtime
;($- (λ ... (...)))

;; a -> b -> c -> ... -> a * b * c * ...
;; Defined by Runtime
;($* (λ ... (...)))

;; a -> b -> c -> ... -> a / b / c / ...
;; Defined by Runtime
;($/ (λ ... (...)))

;; a -> b -> c -> ... -> a % b % c % ...
;; Defined by Runtime
;($% (λ ... (...)))


;;;;;;;; Comparison Operators

;; a -> b -> bool

;; Defined by Runtime
($= (λ a b 
	(= a b)))

;; Defined by Runtime
($< (λ a b 
	(< a b)))

($!= (λ a b
	(! (= a b))))

($<= (λ a b
	(| (< a b) (= a b))))

($> (λ a b 
	(! (<= a b))))

($>= (λ a b 
	(| (> a b) (= a b))))


;;;;;;;; Math

;; Min Function
;; number -> number -> number
($min (λ a b 
	(? (> a b) b a) ))

;; Max Function
;; number -> number -> number
($max (λ a b 
	(? (> a b) a b) ))

;; Abs Function
;; number -> number
($abs (λ a
	(? (< a 0) (- 0 a) a) ))

;; Clamp Function
;; min-number -> max-number -> number -> number
($clamp (λ min max x 
	(? (<= x min) 
		min
		(? (>= x max)
			max
			x))))


;;;;;;;; Tuple

;; Is-Empty Function
;; tuple -> bool
;; Defined by Runtime
;($is-empty (λ t (...))

;; Concat Function
;; Concat tuples.
;; Defined by Runtime.
;; tuple -> ... -> tuple
;($concat (λ ... (...)))

;; Tuple Function
;; Create a tuple from given arguments.
;; Defined by Runtime
;; a -> b -> c -> ... -> tuple
;($tuple (λ ... (...)))

;; Cons Function
;; Add a value to the most left of tuple.
;; Defined by Runtime
;; value -> tuple -> tuple
($cons (λ value t
	(concat (tuple value) t)))

;; Head Function
;; Return the most left element of tuple.
;; Defined by Runtime
;; tuple<element> -> element
;($head (λ tuple (...)))

;; Tail Function
;; Return the tuple and remove the most left element.
;; Defined by Runtime
;; tuple -> tuple
;($tail (λ tuple (...)))

;; Nth Function
;; Get the element from tuple by index.
;; index -> tuple -> element
($nth (Y (λ self i t
	(? (<= i 0) (head t) (self (- i 1) (tail t))))))

;; First Function
;; Get the first element from tuple.
;; tuple -> element
($first (nth 0))

;; Second Function
;; Get the second element from tuple.
;; tuple -> element
($second (nth 1))

;; Third Function
;; Get the third element from tuple.
;; tuple -> element
($third (nth 2))

;; Length Function
;; Get the length of the tuple.
;; tuple -> number
($len (Y (λ self t 
	(? (is-empty t)
		0
		(+ 1 (self (tail t)))))))

;; Map Function
;; Map a tuple.
;; (a -> b) -> a tuple -> b tuple
($map (Y (λ self f t
	(? (is-empty t)
		()
		(cons (f (head t)) (self f (tail t))) ))))

;; Collect Function
;; Collect a tuple.
;; (a -> b tuple) -> a tuple -> b tuple
($collect (λ f t
	(invoke concat (map f t))))

;; Filter Function
;; Filter a tuple.
;; (a -> bool) -> a tuple -> b tuple
($filter (Y (λ self f t
	(? (is-empty t)
		()
		(($r (self f (tail t))) 
			(? (f (head t)) (cons (head t) r) r) )))))

;; Range Function
;; Generate a tuple by a integer range.
;; int -> int -> int tuple
($range (Y (λ self x y
	(? (= x y) 
		(tuple x)
		(? (< x y)
			(cons x (self (+ x 1) y))
			(cons x (self (- x 1) y)))))))

;; Generate Function
;; Generate a tuple by a (index -> element).
;; count -> (index -> element) -> tuple
($generate (λ count generator (
	map generator (range 0 (- count 1)))))

;; Fold Function
;; Fold a tuple to a state.
;; (state -> element -> state) -> state -> tuple -> state
($fold (Y (λ self f state tuple 
	(? (is-empty tuple) 
		state
		(self f (f state (head tuple)) (tail tuple)) ))))

;; Reduce Function
;; Reduce a tuple to a value.
;; (element -> element -> element) -> tuple -> element
($reduce (λ f tuple 
	(fold f (head tuple) (tail tuple))))

;; Reverse Function
;; Revers a tuple.
;; tuple -> tuple
($reverse (λ t (
	fold (λ u e (cons e u)) () t)))

;; Take Function
;; Take left elements from tuple.
;; count -> tuple -> tuple
($take (Y (λ self count t 
	(? (> count 0) 
		(cons (head t) (self (- count 1) (tail t)))
		() ))))

;; Skip Function
;; Skip left elements from tuple.
;; count -> tuple -> tuple
($skip (Y (λ self count t 
	(? (> count 0) 
		(self (- count 1) (tail t))
		t))))

;; Slice Function
;; Slice the tuple.
;; begin -> end -> tuple -> tuple
($slice (λ begin end t
	(skip begin (take (+ end 1) t))))

;; Unfold Function
;; Unfold a function to a tuple.
;; (state -> empty-tuple | (tuple next-state element)) -> state -> tuple
($unfold (Y (λ self f state 
	($current-state (f state))
	(? (is-empty current-state)
		()
		(($next-state (first current-state)) 
			($element (second current-state)) 
			(cons element (self f next-state)) )))))


;;;;;;;; Controls

;; Failwith Function
;; Raise an exception.
;; Defined by Runtime.
;; string -> no-return
;($failwith (λ message (...)))

;; Call Current Continuation Function
;; Defined by Runtime.
;($call-cc (λ f (...)))

;; Loop Function
;; Loop control structure.
;; loop-state -> loop-body -> loop-state
;; loop-body := break-continuation -> continue-continuation -> loop-state -> loop-state
($loop (λ loop-state loop-body
	(call-cc (λ break 
		((Y (λ self state
			($next-state (call-cc (λ continue
				(loop-body break continue state) )))
			self next-state)) 
		loop-state) )) ))

;; While Function
;; While-Loop control structure.
;; loop-state -> condition-body -> loop-body -> loop-state
;; loop-body := break-continuation -> continue-continuation -> loop-state -> loop-state
;; condition-body ::= loop-state -> bool
($while (λ loop-state condition-body loop-body 
	(loop loop-state
		(λ break continue state 
			(? (condition-body state) 
				(loop-body break continue state) 
				(break state) ) ) ) ))

;; For Function

;; For-Each Function

;; Do-While Function
;; Do-While-Loop control structure.
;; loop-state -> condition-body -> loop-body -> loop-state
;; loop-body := break-continuation -> continue-continuation -> loop-state -> loop-state
;; condition-body ::= loop-state -> bool
($do-while (λ loop-state condition-body loop-body 
	(loop loop-state
		(λ break continue state 
			($next-state (loop-body break continue state))
			(? (condition-body state) 
				next-state 
				(break state) ) ) ) ))

;; Try-Catch Function


;;;;;;;; IO

;; Print Function
;; Print value.
;; Defined by Runtime.
;; any -> unit
;($print (λ any (...)))

;; Print String Function
;; Print string.
;; Defined by Runtime.
;; string -> unit
;($print-str (λ str (...)))

;; Print String Line Function
;; Print a line of string.
;; Defined by Runtime.
;; string -> unit
;($print-str-ln (λ str (...)))

;; Read Line Function
;; Read line from console.
;; unit -> string
;($read-line (λ _ (...)))

;; Read Key Function
;; Read key from console.
;; unit -> char
;($read-key (λ _ (...)))

;; Read File Function
;; Read file from filesystem.
;; filename -> number tuple
;($read-file (λ filename (...)))
