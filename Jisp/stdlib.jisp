;;;; Jisp Programming Language
;;;; Standard Library
;;;; By Seng Jik


;;;;;;;; Basics

;; Bind Function
;; Bind a value to a identifier.
;; This function is a part of syntax.
;; Defined by Runtime.
;; value -> f -> (f value)
;($bind (λ f value	
;	(f value)))

;; Ignore Function
;; Ignore a value and return a unit.
;; a -> unit
($ignore (λ _
	()))

;; Eval Function
;; Invoke an expression from string.
;; Defined by Runtime.
;; string -> result
;($eval (λ src (...)))

;; Y Combinator
;; Make a function can call it self.
;; (self -> a...) -> a...
($Y (λ f (
	($ t (λ x n (f (x x) n)))
	t t)))

;; Id Function
;; Return it self.
;; a -> a
($id (λ x (x)))


;;;;;;;; Booleans

;; True Function
;; a -> b -> a
($true (λ a b (a)))

;; False Function
;; a -> b -> b
($false (λ a b (b)))

;; If Operator
;; If condition is true, return a, otherwise, return b.
;; Defined by Runtime, it will ignore death code.
;; (bool) (a) (b) -> a or b
;; Can not be curried.
;($? (λ condition a b (condition a b)))


;;;;;;;; Boolean Operators

;; Or Operator
;; bool -> bool -> bool
($| (λ a b (a true b)))

;; And Operator
;; bool -> bool -> bool
($& (λ a b (a b false)))

;; Not Operator
;; bool -> bool
($! (λ a (a false true)))

;; Xor Operator
;; bool -> bool -> bool
($xor (λ a b (a (! b) b)))

;;;;;;;; Function Operators

;; Forward Function Combine Operator
;; a -> b -> (λ x (b (a x))
($|>> (λ f g x (g (f x))))

;; Double Forward Function Combine Operator
;; a -> b -> (λ x y (b (a x y))
($||>> (λ f g x y (g (f x y))))

;; Backward Function Combine Operator
;; a -> b -> (λ x (a (b x))
($<<| (λ f g x (f (g x))))

;; Double Backward Function Combine Operator
;; a -> b -> (λ x y (a (b x y))
($<<|| (λ f g x y (f (g x y))))


;;;;;;;; Arithmetic Operators

;; a -> b -> c -> ... -> a + b + c + ...
;; Defined by Runtime
;($+ (λ ... (...)))

;; a -> b -> c -> ... -> a - b - c - ...
;; Defined by Runtime
;($- (λ ... (...)))

;; a -> b -> c -> ... -> a * b * c * ...
;; Defined by Runtime
;($* (λ ... (...)))

;; a -> b -> c -> ... -> a / b / c / ...
;; Defined by Runtime
;($/ (λ ... (...)))

;; a -> b -> c -> ... -> a % b % c % ...
;; Defined by Runtime
;($% (λ ... (...)))


;;;;;;;; Comparison Operators

;; a -> b -> bool

;; Defined by Runtime
($= (λ a b 
	(= a b)))

;; Defined by Runtime
($< (λ a b 
	(< a b)))

($!= (||>> = !))

($<= (λ a b
	(| (< a b) (= a b))))

($> (||>> <= !))

($>= (λ a b 
	(| (> a b) (= a b))))


;;;;;;;; Math

;; Min Function
;; number -> number -> number
($min (λ a b 
	(? (< a b) a b) ))

;; Max Function
;; number -> number -> number
($max (λ a b 
	(? (< a b) b a) ))

;; Abs Function
;; number -> number
($abs (λ a
	(? (< a 0) (- 0 a) a) ))

;; Clamp Function
;; min-number -> max-number -> number -> number
($clamp (λ minv maxv (|>> (min maxv) (max minv))))


;;;;;;;; Tuple

;; Is-Empty Function
;; tuple -> bool
;; Defined by Runtime
;($is-empty (λ t (...))

;; Concat Function
;; Concat tuples.
;; Defined by Runtime.
;; tuple -> ... -> tuple
;($concat (λ ... (...)))

;; Tuple Function
;; Create a tuple from given arguments.
;; Defined by Runtime
;; a -> b -> c -> ... -> tuple
;($tuple (λ ... (...)))

;; Cons Function
;; Add a value to the most left of tuple.
;; Defined by Runtime
;; value -> tuple -> tuple
($cons (|>> tuple (λ x y (concat x y))))

;; Head Function
;; Return the most left element of tuple.
;; Defined by Runtime
;; tuple<element> -> element
;($head (λ tuple (...)))

;; Tail Function
;; Return the tuple and remove the most left element.
;; Defined by Runtime
;; tuple -> tuple
;($tail (λ tuple (...)))

;; Nth Function
;; Get the element from tuple by index.
;; index -> tuple -> element
($nth (Y (λ self i t
	(? (<= i 0) (head t) (self (- i 1) (tail t))))))

;; First Function
;; Get the first element from tuple.
;; tuple -> element
($first (nth 0))

;; Second Function
;; Get second element from tuple.
;; tuple -> element
($second (nth 1))

;; Third Function
;; Get third element from tuple.
;; tuple -> element
($third (nth 2))

;; Length Function
;; Get length of the tuple.
;; tuple -> number
($len (Y (λ self t 
	(? (is-empty t)
		0
		(+ 1 (self (tail t)))))))
		
;; Last Function
;; Get last element of the tuple.
;; a tuple -> a
($last (λ t (nth (- (len t) 1) t)))

;; Map Function
;; Map a tuple.
;; (a -> b) -> a tuple -> b tuple
($map (Y (λ self f t
	(? (is-empty t)
		()
		(cons (f (head t)) (self f (tail t))) ))))
		
;; Fold Function
;; Fold a tuple to a state.
;; (state -> element -> state) -> state -> tuple -> state
($fold (Y (λ self f state t 
	(? (is-empty t) 
		state
		(self f (f state (head t)) (tail t)) ))))

;; Invoke Function
;; Invoke a function and pass arguments from tuple.
;; f -> arguments tuple -> (f arguments)
($invoke (fold (λ f v (f v))))

;; Collect Function
;; Collect a tuple.
;; (a -> b tuple) -> a tuple -> b tuple
($collect (λ f t
	(fold concat () (map f t))))

;; Filter Function
;; Filter a tuple.
;; (a -> bool) -> a tuple -> a tuple
($filter (λ f 
	(collect (λ item (? (f item) (tuple item) ())) )))

;; Find Function
;; Find a element from the tuple.
;; (a -> bool) -> a tuple -> a
($find (||>> filter head))
	
;; Exists Function
;; Returns true if f returns true once.
;; (a -> bool) -> a tuple -> a
($exists (<<|| ! (||>> filter is-empty)))

;; Range Function
;; Generate a tuple by a integer range.
;; int -> int -> int tuple
($range (Y (λ self x y
	(? (= x y) 
		(tuple x)
		(? (< x y)
			(cons x (self (+ x 1) y))
			(cons x (self (- x 1) y)))))))

;; Generate Function
;; Generate a tuple by a (index -> element).
;; count -> (index -> element) -> tuple
($generate (λ count generator (
	map generator (range 0 (- count 1)))))

;; Reduce Function
;; Reduce a tuple to a value.
;; (element -> element -> element) -> tuple -> element
($reduce (λ f tuple 
	(fold f (head tuple) (tail tuple))))

;; Reverse Function
;; Revers a tuple.
;; tuple -> tuple
($reverse (λ t (
	fold (λ u e (cons e u)) () t)))

;; Take Function
;; Take left elements from tuple.
;; count -> tuple -> tuple
($take (Y (λ self count t 
	(? (> count 0) 
		(cons (head t) (self (- count 1) (tail t)))
		() ))))
		
;; Take While Function
;; Take elements while condition returns true.
;; (a -> bool) -> a tuple -> a tuple
($take-while (Y (λ self condition t
	(? (condition (head t)) (cons (head t) (self condition (tail t))) ()) )))
	
;; Skip While Function
;; Skip while condition returns true.
;; (a -> bool) -> a tuple -> a tuple
($skip-while (Y (λ self condition t
	(? (is-empty t) 
		() 
		(? (condition (head t)) (self condition (tail t)) t) ) )))

;; Skip Function
;; Skip left elements from tuple.
;; count -> tuple -> tuple
($skip (Y (λ self count t 
	(? (> count 0) 
		(self (- count 1) (tail t))
		t))))

;; Set-Nth Function
;; Set Nth element and return a new tuple.
;; n -> element -> tuple -> tuple
($set-nth (λ n element t
	(concat (take n t) (tuple element) (skip (+ n 1) t)) ))

;; Slice Function
;; Slice the tuple.
;; begin -> end -> tuple -> tuple
($slice (λ begin end t
	(skip begin (take (+ end 1) t))))

;; Unfold Function
;; Unfold a function to a tuple.
;; (state -> empty-tuple | (tuple next-state element)) -> state -> tuple
($unfold (Y (λ self f state 
	($current-state (f state))
	(? (is-empty current-state)
		()
		(($next-state (first current-state)) 
			($element (second current-state)) 
			(cons element (self f next-state)) )))))


;;;;;;;; Controls

;; Failwith Function
;; Raise an exception.
;; Defined by Runtime.
;; string -> no-return
;($failwith (λ message (...)))

;; Call Current Continuation Function
;; Defined by Runtime.
;($call-cc (λ f (...)))

;; Loop Function
;; Loop control structure.
;; loop-state -> loop-body -> loop-state
;; loop-body := break-continuation -> continue-continuation -> loop-state -> loop-state
($loop (λ loop-state loop-body
	(call-cc (λ break 
		((Y (λ self state
			($next-state (call-cc (λ continue
				(loop-body break continue state) )))
			self next-state)) 
		loop-state) )) ))

;; While Function
;; While-Loop control structure.
;; loop-state -> condition-body -> loop-body -> loop-state
;; loop-body := break-continuation -> continue-continuation -> loop-state -> loop-state
;; condition-body ::= loop-state -> bool
($while (λ loop-state condition-body loop-body 
	(loop loop-state
		(λ break continue state 
			(? (condition-body state) 
				(loop-body break continue state) 
				(break state) ) ) ) ))

;; For-Each Function
;; For-Each-Loop control structure.
;; tuple -> loop-body -> unit
;; loop-body := break-continuation -> continue-continuation -> element -> unit
($for-each (λ tuple loop-body
	(while tuple (λ t (! (is-empty t)))
		(λ break continue t
			(($break (λ x (break ())))
				($continue (λ x (continue (tail t))))
				($_ (loop-body break continue (head t)))
				tail t )) ) ))

;; For-Each Function
;; For-Each-Loop control structure.
;; begin-number -> end-number -> loop-body -> unit
;; loop-body := break-continuation -> continue-continuation -> number -> unit
($for (λ begin end loop-body
	(for-each (range begin end) loop-body) ))

;; Do-While Function
;; Do-While-Loop control structure.
;; loop-state -> condition-body -> loop-body -> loop-state
;; loop-body := break-continuation -> continue-continuation -> loop-state -> loop-state
;; condition-body ::= loop-state -> bool
($do-while (λ loop-state condition-body loop-body 
	(loop loop-state
		(λ break continue state 
			($next-state (loop-body break continue state))
			(? (condition-body state) 
				next-state 
				(break state) ) ) ) ))

;; Try-Catch Function
;; Try-Catch control structure.
;; try-body -> catch-body -> result
;; try-body := throw-function -> result
;; catch-body := exception-message -> result
;; throw-function := exception-message -> no-return
;; exception-message := string
($try (λ try-body catch-body 
	(call-cc (λ break
		(try-body (λ exception (break (catch-body exception)))) )) ))


;;;;;;;; Strings

;; Is Blank Function
;; char -> bool
($is-blank-char (λ ch (exists (= ch) (tuple 13 ' ' '	'))))

;; String Equals Function
;; Returns true if two string equals.
;; string -> string -> bool
($string-equals (Y (λ string-equals a b 
	(? (& (is-empty a) (is-empty b)) 
		true
		(? (& (! (is-empty a)) (! (is-empty b)))
			(? (= (head a) (head b)) (string-equals (tail a) (tail b)) false)
			false) ) )))
			
;; String Trim Start Function
;; Returns string and trim start.
;; string -> string
($string-trim-start (skip-while is-blank-char))
		
;; String Trim End Function
;; Returns string and trim end.
;; string -> string
($string-trim-end (Y (λ string-trim-end str
	(? (is-empty str) 
		() 
		(? (is-blank-char (last str)) (string-trim-end (take (- (len str) 1) str)) str) ) )))
		
;; String Trim Function
;; Returns trimmed string.
;; string -> string
($string-trim (|>> string-trim-start string-trim-end))

;; String Find Index Function
;; Find index for given element.
;; Returns -1 if failed.
;; char -> string -> int
($string-find-index ((Y (λ self n c str 
	(? (is-empty str)
		-1
		(? (= (head str) c)
			n
			(self (+ 1 n) c (tail str)) ) ) )) 0 ))

;; String Char Exists
;; Find given char in string, returns true if found.
;; char -> string -> bool
($string-char-exists (λ c (exists (= c))))

;; String Split Function
;; Returns spllited strings in tuple.
;; char -> string -> string tuple
($string-split (Y (λ self c str
	(? (is-empty str)
		()
		(? (string-char-exists c str)
			(cons (take (string-find-index c str) str) (self c (skip (+ 1 (string-find-index c str)) str)))
			(tuple str) ) ) )))

;;;;;;;; IO

;; Print Function
;; Print value.
;; Defined by Runtime.
;; any -> unit
;($print (λ any (...)))

;; Print Line Function
;; Print value in new line.
;; Defined by Runtime.
;; any -> unit
;($print-ln (λ any (...)))

;; Print String Function
;; Print string.
;; Defined by Runtime.
;; string -> unit
;($print-str (λ str (...)))

;; Print String Line Function
;; Print a line of string.
;; Defined by Runtime.
;; string -> unit
;($print-str-ln (λ str (...)))

;; Print Bool
;; Print boolean function.
;; bool -> unit
($print-bool (λ b (print-str (b "true" "false"))))

;; Read Line Function
;; Read line from console.
;; Defined by runtime.
;; unit -> string
;($read-line (λ _ (...)))

;; Read Key Function
;; Read key from console.
;; Defined by runtime.
;; unit -> char
;($read-key (λ _ (...)))

;; Read File Function
;; Read file from filesystem.
;; Defined by runtime.
;; filename -> number tuple
;($read-file (λ filename (...)))

;; Read Text File Function
;; Read text file from filesystem.
;; Defined by runtime.
;; filename -> number tuple
;($read-text-file (λ filename (...)))

;; Write Text File Function
;; Write text file to filesystem.
;; Defined by runtime.
;; string -> filename -> unit
;($write-text-file (λ content filename (...)))

;; Create Directory Function
;; Create directory to filesystem.
;; Defined by runtime.
;; directory-name -> unit
;($create-directory (λ directory-name (...)))

;; System Function
;; Call system command.
;; Defined by runtime.
;; command [-> argument -> ...] -> unit
;($system (λ command arg1 arg2 ... (...)))

;; Delete Function
;; Delete file from filesystem.
;; Defined by runtime.
;; file-or-dir-to-delete -> unit
;($delete (λ file-or-dir-to-delete (...)))
