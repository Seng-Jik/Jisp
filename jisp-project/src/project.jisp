
;; Project 数据结构
;; 0. project-name: string
;; 1. project-type: string
;; 2. src: string tuple
;; 3. lib: string tuple


;; project-name: string -> project-type: string -> srcs: string tuple -> Project
($project-create (λ project-name project-type srcs (
    (tuple project-name project-type srcs ()) )))
    
;; Project -> name: string
($project-get-name head)

;; Project -> type: string
($project-get-type second)

;; Project -> srcs: string tuple
($project-get-src (nth 2))

;; Project -> libs: string tuple
($project-get-lib (nth 3))
    
;; Project -> project-dir: string -> unit
($project-save-config (λ project project-dir (
   ($project-line (concat "project: " (project-get-name project)))
   ($type-line (concat "type: " (project-get-type project)))
   ($src-lines (map (λ src (concat "src: " src)) (project-get-src project)))
   ($lib-lines (map (λ lib (concat "lib: " lib)) (project-get-lib project)))
   ($merged (concat (tuple project-line type-line) lib-lines src-lines))
   ($merged (map (λ x (concat x nl)) merged))
   ($merged-text (reduce (λ a b (concat a b)) merged))
   (write-text-file merged-text (concat project-dir "/project.yml"))
)))
 
;; project-dir -> Project
($project-load-config (λ project-dir (
   ($config (read-text-file (concat project-dir "/project.yml")))
   ($config (string-split (head nl) config))
   ($del-line-comment (λ x
   	($x (concat x "# "))
   	($pos (string-find-index '#' x))
   	(take pos x)
   ))
   ($config (map del-line-comment config))
   ($config (map (λ x (map string-trim (string-split ':' x))) config))
   ($project-name (string-trim (second (head (filter (λ x (string-equals (first x) "project")) config)))))
   ($project-type (string-trim (second (head (filter (λ x (string-equals (first x) "type")) config)))))
   ($project-srcs (filter (λ x (string-equals (first x) "src")) config))
   ($project-srcs (map (λ x (string-trim (second x))) project-srcs))
   ($project-libs (filter (λ x (string-equals (first x) "lib")) config))
   ($project-libs (map (λ x (string-trim (second x))) project-libs))

   (tuple project-name project-type project-srcs project-libs)
)))

;; Project -> unit
($print-project (λ project
   ($_ (print-str-ln (concat "project name: " (project-get-name project))))
   ($_ (print-str-ln (concat "prject type: " (project-get-type project))))
   ($_ (print-str-ln "libs: "))
   ($_ (map (λ x (print-str-ln (concat "    " x))) (project-get-lib project)))
   ($_ (print-str-ln "source code: "))
   ($_ (map (λ x (print-str-ln (concat "    " x))) (project-get-src project)))
   ()
))