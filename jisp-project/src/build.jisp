
;; path tuple -> output-path -> unit
($merge-src (λ src-paths out
   (($merged (collect (λ path (concat (read-text-file path) " " (tuple 10))) src-paths))
   (write-text-file merged out))
))

;; Project -> src-path tuple
($resolve-src-path (λ project-dir project 
   (($srcs (map (λ x (concat project-dir "/src/" x)) (project-get-src project)))
   ($libs (project-get-lib project))
   ($_ (map (λ lib (system "jisp-project" "build" lib)) libs))
   ($lib-srcs (map (λ libdir (concat "obj/" (project-get-name (project-load-config libdir)) ".jisp")) libs))
   (concat lib-srcs srcs))
))

;; unit -> unit
($create-obj-dir (λ _ (create-directory "obj")))

;; Project -> out-path
($merge-project (λ project-dir project
   (($_ (create-obj-dir ()))
   ($project-name (project-get-name project))
   ($resolved (resolve-src-path project-dir project))
   ($output-path  (concat "obj/" project-name ".jisp"))
   ($_ (merge-src resolved output-path))
   output-path)
))

;; project-dir-path -> unit
($run-app (λ project-dir args
   (($project (project-load-config project-dir))
   (system "jisp" (merge-project project-dir project) (reduce (λ a b (concat a " " b)) args)))
))

;; project-dir-path -> unit
($build-project (λ project-dir
   (($project (project-load-config project-dir))
   ($merged-path (merge-project project-dir project))
   (? (string-equals (project-get-type project) "lib") ()
      (system "jisp" "-c" merged-path (concat project-dir "/" (project-get-name project) ".exe"))))
))
