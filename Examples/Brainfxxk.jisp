;; Brainfxxk Interpreter on Jisp
;; http://www.muppetlabs.com/~breadbox/bf/
;; By Seng Jik


;; Source Code
($hello-world 
	"++++++++++[>+>+++>+++++++>++++++++++<<<<-]>>>++.>+.+++++++..+++.<<++.>+++++++++++++++.>.+++.------.--------.<<+.<.")

($source-code 
	(? (is-empty argv)
		hello-world
		(read-file (head argv)) ))

($source-code-length (len source-code))		
		
		
;; Interpreter Context
;; Structure: (tuple pc pointer mem)

; round-number -> number -> number
($round-number (Y (λ self round x
	(? (>= x round) 
		(% x round)
		(? (< x 0)
			(self round (+ x round))
			x ) ) )))

($mem-size 30000)
($default-context 
	(tuple 0 0 (generate mem-size (λ _ (0)))))

; context -> pc
($get-pc head)

; pc -> context -> context
($set-pc (set-nth 0))

; context -> context
($inc-pc (λ context
	(set-pc (+ 1 (get-pc context)) context)))

; context -> pointer
($get-pointer second)

; pointer -> context -> context
($set-pointer (λ pointer context
	(set-nth 1 (round-number mem-size pointer) context)))

; context -> context
($inc-pointer (λ context
	(set-pointer (+ 1 (get-pointer context)) context)))

; context -> context
($dec-pointer (λ context
	(set-pointer (- (get-pointer context) 1) context)))

; context -> mem
($get-mem third)

; context -> byte
($get-current-byte (λ context
	(nth (get-pointer context) (get-mem context))))

; byte -> context -> context
($set-current-byte (λ byte context
	(set-nth 2 (set-nth (get-pointer context) (round-number 256 byte) (get-mem context)) context) ))

; context -> context
($inc-current-byte (λ context		
	(set-current-byte (+ 1 (get-current-byte context)) context) ))

; context -> context
($dec-current-byte (λ context
	(set-current-byte (- (get-current-byte context) 1) context) ))

;context -> context
($print-current-byte (λ context
	(($_ (print-str (get-current-byte context))) context) ))
($read-key-to-current-byte (λ context 
	(set-current-byte (read-key ()) context) ))


;; [] Bracket Pairs Table
;; Structure: (tuple (tuple left-bracket-pc right-bracket-pc) ...)
($bracket-pairs-position-table (
	($all-instructions-position-table
		((Y (λ self index src 
			(? (is-empty src) 
				() 
				(cons
					(tuple (head src) index)
					(self (+ 1 index) (tail src)) ) ) )) 0 source-code)) 
					
	($bracket-position-table 
		(filter (λ x (| (= (head x) '[') (= (head x) ']'))) all-instructions-position-table))
		
	($bracket-pairs-table-calc-result
		(fold 
			(λ state element
				(? (= (head element) '[') 
					(tuple (cons (second element) (first state)) (second state))
					(($_ (? (is-empty (first state)) (failwith "Brackets not matched!") () ))
						($left-position (head (first state)))
						($right-position (second element))
						($pair (tuple left-position right-position )) 
						tuple (tail (first state)) (cons pair (second state)) ) ) ) 
			(tuple () ())
			bracket-position-table ) )

	($_ (? (is-empty (first bracket-pairs-table-calc-result)) () 
		(failwith "Brackets not matched!") ))
			
	second bracket-pairs-table-calc-result ))

; pc -> pc
($match-left-bracket-to-right-bracket (λ pc
	(($condition (λ x (= pc (first x)))) 
	second (head (filter condition bracket-pairs-position-table))) ))

; pc -> pc
($match-right-bracket-to-left-bracket (λ pc
	(($condition (λ x (= pc (second x)))) 
	first (head (filter condition bracket-pairs-position-table))) ))

; context -> context
($left-bracket-jump (λ context
	(? (= 0 (get-current-byte context))
		(set-pc (match-left-bracket-to-right-bracket (get-pc context)) context)
		context ) ))

; context -> context
($right-bracket-jump (λ context
	(? (!= 0 (get-current-byte context))
		(set-pc (match-right-bracket-to-left-bracket (get-pc context)) context)
		context ) ))


;; Dispatcher
($process-functions (tuple
	(tuple '+' inc-current-byte)
	(tuple '-' dec-current-byte)
	(tuple '>' inc-pointer)
	(tuple '<' dec-pointer)
	(tuple '.' print-current-byte)
	(tuple ',' read-key-to-current-byte) 
	(tuple '[' left-bracket-jump)
	(tuple ']' right-bracket-jump) ))

; instuction -> (context -> context)
($get-process-function-by-instuction (λ instruction
	(($result (filter (λ x (= instruction (head x))) process-functions))
		? (is-empty result) 
			(λ context (context))
			(second (head result))) ))

($next-state (λ context
	(($current-instruction (nth (get-pc context) source-code))
		($processed-context ((get-process-function-by-instuction current-instruction) context))
		inc-pc processed-context) ))

($run (Y (λ self context
	(? (>= (get-pc context) source-code-length)
		()
		(self (next-state context)) ) )))

;; Main

run default-context